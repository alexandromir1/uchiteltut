import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Building project for production...');

try {
  // –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
  console.log('üì¶ Building client...');
  execSync('cd client && npm run build', { stdio: 'inherit' });

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  if (!fs.existsSync('dist')) {
    fs.mkdirSync('dist');
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
  console.log('üìÅ Copying client build...');
  if (fs.existsSync('client/build')) {
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
    const copyFolderRecursive = function(source, target) {
      if (!fs.existsSync(target)) {
        fs.mkdirSync(target, { recursive: true });
      }
      
      const files = fs.readdirSync(source);
      
      files.forEach(file => {
        const sourcePath = path.join(source, file);
        const targetPath = path.join(target, file);
        
        if (fs.lstatSync(sourcePath).isDirectory()) {
          copyFolderRecursive(sourcePath, targetPath);
        } else {
          fs.copyFileSync(sourcePath, targetPath);
        }
      });
    };
    
    copyFolderRecursive('client/build', 'dist');
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
  console.log('üìÅ Copying server files...');
  const serverFiles = [
    'server/src',
    'server/data',
    'server/prisma',
    'server/.env',
    'server/package.json',
    'server/package-lock.json'
  ];

  serverFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const dest = `dist/${path.basename(file)}`;
      if (fs.lstatSync(file).isDirectory()) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
        copyFolderRecursive(file, dest);
      } else {
        fs.copyFileSync(file, dest);
      }
    }
  });

  // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π index.js —Å–µ—Ä–≤–µ—Ä–∞
  if (fs.existsSync('server/index.js')) {
    fs.copyFileSync('server/index.js', 'dist/server/index.js');
  }

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π package.json –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  const packageJson = {
    name: "teacher-job-portal-production",
    version: "1.0.0",
    type: "module",
    scripts: {
      start: "node server/index.js",
      "install-deps": "cd server && npm install"
    },
    dependencies: {
      "express": "^4.18.2",
      "cors": "^2.8.5",
      "apollo-server-express": "^3.12.1",
      "xlsx": "^0.18.5"
    }
  };

  fs.writeFileSync('dist/package.json', JSON.stringify(packageJson, null, 2));

  // –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!fs.existsSync('dist/.env')) {
    const envContent = `NODE_ENV=production
PORT=5000
DATABASE_URL="file:./dev.db"
CORS_ORIGIN=https://your-domain.ru
`;
    fs.writeFileSync('dist/.env', envContent);
  }

  console.log('‚úÖ Build completed!');
  console.log('üìÅ Production files are in ./dist/');
  
} catch (error) {
  console.error('‚ùå Build failed:', error);
  process.exit(1);
}