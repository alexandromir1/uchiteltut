import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import XLSX from 'xlsx';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const excelDir = path.join(__dirname, '../../data/excel');

// üëá –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ)
const COLUMN_MAP = {
  region: ["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞", "—Ä–∞–π–æ–Ω", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π"],
  position: ["–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–¥–æ–ª–∂–Ω", "–ø—Ä–µ–¥–º–µ—Ç", "–≤–∞–∫–∞–Ω—Å–∏—è"],
  school: ["–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "—à–∫–æ–ª–∞", "–æ–æ", "—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ"],
  hours: ["–Ω–∞–≥—Ä—É–∑–∫–∞", "—á–∞—Å", "—Å—Ç–∞–≤–∫–∞", "–Ω–∞–≥—Ä—É–∑–∫–∞ (—á–∞—Å)"],
  salary: ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–∑–ø", "–æ–∫–ª–∞–¥", "–æ–ø–ª–∞—Ç–∞"],
  housing: ["–∂–∏–ª—å–µ", "–æ–±—â–µ–∂–∏—Ç–∏–µ", "–≤–∏–¥ –ø—Ä–µ–¥–æ—Å—Ç. –∂–∏–ª—å—è", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∂–∏–ª—å—è"],
  benefits: ["–ª—å–≥–æ—Ç—ã", "–ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "–∏–º–µ—é—â–∏–µ—Å—è –ª—å–≥–æ—Ç—ã –≤ –º—Ä"],
  contacts: ["–∫–æ–Ω—Ç–∞–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—Ñ–∏–æ", "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"],
  email: ["email", "–ø–æ—á—Ç–∞", "—ç–ª.–ø–æ—á—Ç–∞", "–∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã"],
  support: ["–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã"],
  studentEmployment: ["—Å—Ç—É–¥–µ–Ω—Ç", "—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Å—Ç–∞—Ä—à–∏–π –∫—É—Ä—Å"],
  duties: ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–æ)"],
  openDate: ["–¥–∞—Ç–∞", "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"],
};

// üîç —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function findColumnIndex(headers, keywords) {
  if (!headers || !Array.isArray(headers)) return -1;

  const normalizedHeaders = headers.map(h => String(h).toLowerCase().trim());

  for (const keyword of keywords) {
    for (let i = 0; i < normalizedHeaders.length; i++) {
      if (normalizedHeaders[i].includes(keyword.toLowerCase())) {
        return i;
      }
    }
  }
  return -1;
}

// üß© —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
function parseExcelFile(filePath) {
  const workbook = XLSX.readFile(filePath, { cellDates: true });
  const jobs = [];

  if (!workbook.SheetNames.includes("–û–û")) {
    console.log(`‚ùå –õ–∏—Å—Ç "–û–û" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ ${path.basename(filePath)}`);
    return jobs;
  }

  const sheet = workbook.Sheets["–û–û"];
  const range = XLSX.utils.decode_range(sheet['!ref']);

  // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  let headerRowIndex = -1;
  let headers = [];

  for (let row = range.s.r; row <= Math.min(range.e.r, 10); row++) {
    const rowData = [];
    for (let col = range.s.c; col <= range.e.c; col++) {
      const cellAddress = { r: row, c: col };
      const cellRef = XLSX.utils.encode_cell(cellAddress);
      const cell = sheet[cellRef];
      rowData.push(cell ? cell.v : "");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const hasPosition = rowData.some(cell =>
      String(cell).toLowerCase().includes("–¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    );
    const hasSchool = rowData.some(cell =>
      String(cell).toLowerCase().includes("–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
    );

    if (hasPosition && hasSchool) {
      headerRowIndex = row;
      headers = rowData;
      break;
    }
  }

  if (headerRowIndex === -1) {
    console.log(`‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ ${path.basename(filePath)}`);
    return jobs;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
  const columnIndexes = {};
  for (const [key, keywords] of Object.entries(COLUMN_MAP)) {
    columnIndexes[key] = findColumnIndex(headers, keywords);
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ ${path.basename(filePath)}:`, {
    region: columnIndexes.region,
    position: columnIndexes.position,
    school: columnIndexes.school,
    hours: columnIndexes.hours,
    salary: columnIndexes.salary
  });

  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  for (let row = headerRowIndex + 1; row <= range.e.r; row++) {
    const rowData = [];
    for (let col = range.s.c; col <= range.e.c; col++) {
      const cellAddress = { r: row, c: col };
      const cellRef = XLSX.utils.encode_cell(cellAddress);
      const cell = sheet[cellRef];
      rowData.push(cell ? cell.v : "");
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
    const region = columnIndexes.region >= 0 ? rowData[columnIndexes.region] : "";
    const position = columnIndexes.position >= 0 ? rowData[columnIndexes.position] : "";
    const school = columnIndexes.school >= 0 ? rowData[columnIndexes.school] : "";

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!position && !school) continue;

    const job = {
      id: `${path.basename(filePath, ".xlsx")}-${row}`,
      region: region || path.basename(filePath, ".xlsx"),
      position: position || "",
      school: school || "",
      hours: columnIndexes.hours >= 0 ? rowData[columnIndexes.hours] : "",
      salary: columnIndexes.salary >= 0 ? rowData[columnIndexes.salary] : "",
      housing: columnIndexes.housing >= 0 ? rowData[columnIndexes.housing] : "",
      benefits: columnIndexes.benefits >= 0 ? rowData[columnIndexes.benefits] : "",
      contacts: columnIndexes.contacts >= 0 ? rowData[columnIndexes.contacts] : "",
      email: columnIndexes.email >= 0 ? rowData[columnIndexes.email] : "",
      support: columnIndexes.support >= 0 ? rowData[columnIndexes.support] : "",
      studentEmployment: columnIndexes.studentEmployment >= 0 ? rowData[columnIndexes.studentEmployment] : "",
      duties: columnIndexes.duties >= 0 ? rowData[columnIndexes.duties] : "",
      openDate: columnIndexes.openDate >= 0 ? rowData[columnIndexes.openDate] : "",
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —à–∫–æ–ª–∞
    if (job.position || job.school) {
      jobs.push(job);
    }
  }

  console.log(`‚úÖ ${path.basename(filePath)} ‚Äî –Ω–∞–π–¥–µ–Ω–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (jobs.length > 0) {
    console.log(`üìù –ü—Ä–∏–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:`, {
      position: jobs[0].position,
      school: jobs[0].school,
      hours: jobs[0].hours,
      salary: jobs[0].salary
    });
  }

  return jobs;
}

// üöÄ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
function getJobs() {
  console.log('üîç –ü–æ–∏—Å–∫ Excel —Ñ–∞–π–ª–æ–≤ –≤:', excelDir);

  if (!fs.existsSync(excelDir)) {
    console.error("‚ùå –ü–∞–ø–∫–∞ —Å Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", excelDir);
    console.log("üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", process.cwd());
    console.log("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", fs.readdirSync('.'));

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É data
    const possiblePaths = [
      './data/excel',
      '../data/excel',
      '../../data/excel',
      './server/data/excel'
    ];

    for (const possiblePath of possiblePaths) {
      if (fs.existsSync(possiblePath)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏: ${possiblePath}`);
        excelDir = possiblePath;
        break;
      }
    }

    if (!fs.existsSync(excelDir)) {
      return [];
    }
  }
  if (!fs.existsSync(excelDir)) {
    console.error("‚ùå –ü–∞–ø–∫–∞ —Å Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", excelDir);
    return [];
  }

  const files = fs.readdirSync(excelDir).filter(f => f.endsWith(".xlsx"));
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} Excel —Ñ–∞–π–ª–æ–≤`);

  let allJobs = [];

  files.forEach(file => {
    try {
      const filePath = path.join(excelDir, file);
      const jobs = parseExcelFile(filePath);
      allJobs = allJobs.concat(jobs);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${file}:`, err.message);
    }
  });

  console.log(`üéâ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤`);
  return allJobs;
}

export { getJobs };