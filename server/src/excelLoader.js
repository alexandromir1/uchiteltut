import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import XLSX from 'xlsx';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª–∞–º - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
let excelDir = path.join(__dirname, '../data/excel');

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
const COLUMN_MAP = {
  region: ["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞", "—Ä–∞–π–æ–Ω", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ"],
  position: ["–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–¥–æ–ª–∂–Ω", "–ø—Ä–µ–¥–º–µ—Ç", "–≤–∞–∫–∞–Ω—Å–∏—è", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"],
  school: ["–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "—à–∫–æ–ª–∞", "–æ–æ", "—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–æ"],
  hours: ["–Ω–∞–≥—Ä—É–∑–∫–∞", "—á–∞—Å", "—Å—Ç–∞–≤–∫–∞", "–Ω–∞–≥—Ä—É–∑–∫–∞ (—á–∞—Å)", "—á–∞—Å—ã"],
  salary: ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–∑–ø", "–æ–∫–ª–∞–¥", "–æ–ø–ª–∞—Ç–∞", "–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è", "—Ä–∞–∑–º–µ—Ä"],
  housing: ["–∂–∏–ª—å–µ", "–æ–±—â–µ–∂–∏—Ç–∏–µ", "–≤–∏–¥ –ø—Ä–µ–¥–æ—Å—Ç. –∂–∏–ª—å—è", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∂–∏–ª—å—è", "–∂–∏–ª–∏—â–Ω—ã–µ"],
  benefits: ["–ª—å–≥–æ—Ç—ã", "–ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "–∏–º–µ—é—â–∏–µ—Å—è –ª—å–≥–æ—Ç—ã –≤ –º—Ä", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ"],
  contacts: ["–∫–æ–Ω—Ç–∞–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—Ñ–∏–æ", "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"],
  email: ["email", "–ø–æ—á—Ç–∞", "—ç–ª.–ø–æ—á—Ç–∞", "–∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è"],
  support: ["–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"],
  studentEmployment: ["—Å—Ç—É–¥–µ–Ω—Ç", "—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Å—Ç–∞—Ä—à–∏–π –∫—É—Ä—Å", "–≤—ã–ø—É—Å–∫–Ω–∏–∫"],
  duties: ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–æ)", "–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ"],
  openDate: ["–¥–∞—Ç–∞", "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏", "—Å–æ–∑–¥–∞–Ω–∏—è"],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function findColumnIndex(headers, keywords) {
  if (!headers || !Array.isArray(headers)) return -1;

  const normalizedHeaders = headers.map(h => String(h).toLowerCase().trim());

  for (const keyword of keywords) {
    for (let i = 0; i < normalizedHeaders.length; i++) {
      if (normalizedHeaders[i].includes(keyword.toLowerCase())) {
        return i;
      }
    }
  }
  return -1;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã
function normalizeDate(dateValue) {
  if (!dateValue) return "";
  
  try {
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –∏–∑ Excel
    if (dateValue instanceof Date) {
      return dateValue.toLocaleDateString('ru-RU');
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (Excel timestamp)
    if (typeof dateValue === 'number') {
      const date = new Date((dateValue - 25569) * 86400 * 1000);
      return date.toLocaleDateString('ru-RU');
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    const str = String(dateValue).trim();
    if (str && !isNaN(new Date(str).getTime())) {
      return new Date(str).toLocaleDateString('ru-RU');
    }
    
    return str;
  } catch (error) {
    return String(dateValue);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
function parseExcelFile(filePath) {
  try {
    console.log(`üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${path.basename(filePath)}`);
    
    const workbook = XLSX.readFile(filePath, { 
      cellDates: true,
      cellText: false,
      cellNF: false 
    });
    const jobs = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–∞ "–û–û" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    const sheetName = workbook.SheetNames.find(name => 
      name.toLowerCase().includes('–æ–æ') || name.toLowerCase().includes('–≤–∞–∫–∞–Ω—Å–∏–∏')
    ) || workbook.SheetNames[0];

    if (!sheetName) {
      console.log(`‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ ${path.basename(filePath)}`);
      return jobs;
    }

    const sheet = workbook.Sheets[sheetName];
    
    if (!sheet || !sheet['!ref']) {
      console.log(`‚ùå –ü—É—Å—Ç–æ–π –ª–∏—Å—Ç –≤ —Ñ–∞–π–ª–µ ${path.basename(filePath)}`);
      return jobs;
    }

    const range = XLSX.utils.decode_range(sheet['!ref']);
    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: "" });

    if (jsonData.length === 0) {
      console.log(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ ${path.basename(filePath)}`);
      return jobs;
    }

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    let headerRowIndex = -1;
    let headers = [];

    for (let row = 0; row < Math.min(jsonData.length, 15); row++) {
      const rowData = jsonData[row] || [];
      const rowString = rowData.map(cell => String(cell).toLowerCase()).join(' ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const hasPosition = rowString.includes('–¥–æ–ª–∂–Ω–æ—Å—Ç—å');
      const hasSchool = rowString.includes('–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è') || rowString.includes('—à–∫–æ–ª–∞') || rowString.includes('–æ–æ');

      if (hasPosition && hasSchool) {
        headerRowIndex = row;
        headers = rowData;
        break;
      }
    }

    if (headerRowIndex === -1 && jsonData.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      headerRowIndex = 0;
      headers = jsonData[0];
      console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ ${path.basename(filePath)}`);
    }

    if (headerRowIndex === -1) {
      console.log(`‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ ${path.basename(filePath)}`);
      return jobs;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
    const columnIndexes = {};
    for (const [key, keywords] of Object.entries(COLUMN_MAP)) {
      columnIndexes[key] = findColumnIndex(headers, keywords);
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ ${path.basename(filePath)}:`, 
      Object.fromEntries(Object.entries(columnIndexes).filter(([_, idx]) => idx !== -1))
    );

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for (let row = headerRowIndex + 1; row < jsonData.length; row++) {
      const rowData = jsonData[row] || [];

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
      const region = columnIndexes.region >= 0 ? String(rowData[columnIndexes.region] || "").trim() : "";
      const position = columnIndexes.position >= 0 ? String(rowData[columnIndexes.position] || "").trim() : "";
      const school = columnIndexes.school >= 0 ? String(rowData[columnIndexes.school] || "").trim() : "";

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!position && !school && !region) continue;

      const job = {
        id: `${path.basename(filePath, ".xlsx")}-${row + 1}`,
        region: region || path.basename(filePath, ".xlsx").replace('.xlsx', ''),
        position: position || "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
        school: school || "–®–∫–æ–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
        hours: columnIndexes.hours >= 0 ? String(rowData[columnIndexes.hours] || "").trim() : "",
        salary: columnIndexes.salary >= 0 ? String(rowData[columnIndexes.salary] || "").trim() : "",
        housing: columnIndexes.housing >= 0 ? String(rowData[columnIndexes.housing] || "").trim() : "",
        benefits: columnIndexes.benefits >= 0 ? String(rowData[columnIndexes.benefits] || "").trim() : "",
        contacts: columnIndexes.contacts >= 0 ? String(rowData[columnIndexes.contacts] || "").trim() : "",
        email: columnIndexes.email >= 0 ? String(rowData[columnIndexes.email] || "").trim() : "",
        support: columnIndexes.support >= 0 ? String(rowData[columnIndexes.support] || "").trim() : "",
        studentEmployment: columnIndexes.studentEmployment >= 0 ? String(rowData[columnIndexes.studentEmployment] || "").trim() : "",
        duties: columnIndexes.duties >= 0 ? String(rowData[columnIndexes.duties] || "").trim() : "",
        openDate: columnIndexes.openDate >= 0 ? normalizeDate(rowData[columnIndexes.openDate]) : "",
      };

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      Object.keys(job).forEach(key => {
        if (job[key] === "" || job[key] === "undefined") {
          job[key] = "";
        }
      });

      jobs.push(job);
    }

    console.log(`‚úÖ ${path.basename(filePath)} ‚Äî –Ω–∞–π–¥–µ–Ω–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    return jobs;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return [];
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
function getJobs() {
  console.log('üîç –ü–æ–∏—Å–∫ Excel —Ñ–∞–π–ª–æ–≤ –≤:', excelDir);

  try {
    if (!fs.existsSync(excelDir)) {
      console.error("‚ùå –ü–∞–ø–∫–∞ —Å Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", excelDir);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É data
      const possiblePaths = [
        './data/excel',
        '../data/excel', 
        '../../data/excel',
        './server/data/excel',
        path.join(process.cwd(), 'data/excel'),
        path.join(__dirname, '../../../data/excel')
      ];

      for (const possiblePath of possiblePaths) {
        const fullPath = path.resolve(possiblePath);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: ${fullPath}`);
        if (fs.existsSync(fullPath)) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏: ${fullPath}`);
          excelDir = fullPath;
          break;
        }
      }
    }

    if (!fs.existsSync(excelDir)) {
      console.error("‚ùå –ü–∞–ø–∫–∞ —Å Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞");
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
      return [
        {
          id: "test-1",
          position: "–£—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏",
          school: "–¢–µ—Å—Ç–æ–≤–∞—è —à–∫–æ–ª–∞ ‚Ññ1",
          region: "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω",
          hours: "18 —á–∞—Å–æ–≤",
          salary: "45000 —Ä—É–±.",
          housing: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ",
          benefits: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç",
          contacts: "+7 (999) 123-45-67",
          email: "school1@example.com"
        }
      ];
    }

    const files = fs.readdirSync(excelDir).filter(f => f.endsWith(".xlsx"));
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} Excel —Ñ–∞–π–ª–æ–≤`);

    let allJobs = [];

    files.forEach(file => {
      const filePath = path.join(excelDir, file);
      const jobs = parseExcelFile(filePath);
      allJobs = allJobs.concat(jobs);
    });

    console.log(`üéâ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (allJobs.length > 0) {
      const debugPath = path.join(__dirname, '../jobs-debug.json');
      fs.writeFileSync(debugPath, JSON.stringify(allJobs.slice(0, 10), null, 2));
      console.log(`üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${debugPath}`);
    }
    
    return allJobs;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getJobs:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return [
      {
        id: "error-1",
        position: "–£—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏",
        school: "–†–µ–∑–µ—Ä–≤–Ω–∞—è —à–∫–æ–ª–∞",
        region: "–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–≥–∏–æ–Ω",
        hours: "20 —á–∞—Å–æ–≤",
        salary: "40000 —Ä—É–±.",
        housing: "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
        benefits: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–æ—Ü–ø–∞–∫–µ—Ç",
        contacts: "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
        email: "reserve@example.com"
      }
    ];
  }
}

export { getJobs };